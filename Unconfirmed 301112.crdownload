# -*- coding: utf-8 -*-
"""ANN-part1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PXHuoQrZE-B4AwenD4Uy3nVyuElO0luE
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
# %matplotlib inline
import matplotlib as mpl
import matplotlib.pyplot as plt

import tensorflow as tf
from tensorflow import keras

keras.__version__

tf.__version__

fashion_mnist=keras.datasets.fashion_mnist
(X_train_full,y_train_full),(X_test,y_test)=fashion_mnist.load_data()

plt.imshow(X_train_full[0])

y_train_full[7]

class_names=["T-shirt/top","Trouser","Pullover","Dress","Coat","Sandal","Shirt","Sneaker","Bag","Ankle boot"]

class_names[y_train_full[7]]

X_train_full[10]

"""### **Data Normalization**"""

X_train_n= X_train_full/255.
X_test_n=X_test/255.

X_valid,X_train=X_train_n[:5000],X_train_n[5000:]
y_valid,y_train=y_train_full[:5000],y_train_full[5000:]
X_test=X_test_n

np.random.seed(42)
tf.random.set_seed(42)

"""## Creating a NN model using Sequential API in **KERAS** """

model=keras.models.Sequential()
model.add(keras.layers.Flatten(input_shape=[28,28]))
model.add(keras.layers.Dense(300,activation="relu"))
model.add(keras.layers.Dense(100,activation="relu"))
model.add(keras.layers.Dense(10,activation="softmax"))

model.summary()

"""## Structure of **NN**"""

import pydot
keras.utils.plot_model(model)

weights,biases=model.layers[1].get_weights()

weights

weights.shape

biases

biases.shape

"""## **Compiling**"""

model.compile(loss="sparse_categorical_crossentropy",
              optimizer="sgd",
              metrics=["accuracy"])

model_history= model.fit(X_train,y_train,epochs=30,validation_data=(X_valid,y_valid))

model_history.params

model_history.history

import pandas as pd
pd.DataFrame(model_history.history).plot(figsize=(8,5))
plt.grid(True)
plt.gca().set_ylim(0,1)
plt.show()

model.evaluate(X_test,y_test)

X_new=X_test[:3]

y_proba= model.predict(X_new)
y_proba.round(2)

y_pred=model.predict_classes(X_new)
y_pred

np.array(class_names)[y_pred]

print(plt.imshow(X_test[0]))

print(plt.imshow(X_test[1]))

print(plt.imshow(X_test[2]))

# Commented out IPython magic to ensure Python compatibility.
# %pwd